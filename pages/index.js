import { useEffect, useRef, useState } from 'react'
import Head from 'next/head'

import About from '../components/About'
import Footer from '../components/Footer'
import Header from '../components/Header'
import Navbar from '../components/Navbar'
import NavigationDots from '../components/NavigationDots'
import Projects from '../components/Projects'
import Technologies from '../components/Technologies'

import { client } from '../lib/client'

const getSectionIndex = (section) => {
    switch (section) {
        case 'about': return 1;
        case 'technologies': return 2;
        case 'projects': return 3;
        case 'contact': return 4;
        default: return 0;
    }
}

export default function Home({ projects, technologies, abouts }) {
    const headerRef = useRef();
    const aboutRef = useRef();
    const technologiesRef = useRef();
    const projectsRef = useRef();
    const contactRef = useRef();

    const [currentSection, setCurrentSection] = useState(0);

    const handleObserver = (entries) => {
        const entry = entries[0];
        if (entry.isIntersecting) {
            const sectionIndex = getSectionIndex(entry.target.id);
            setCurrentSection(sectionIndex);
        }
    }

    const handleNavigationDotClick = (index) => {
        setCurrentSection(index);
    }

    useEffect(() => {
        const observer = new IntersectionObserver(handleObserver, {
            root: null,
            rootMargin: '0px',
            threshold: 0.5,
        });

        if (headerRef.current) observer.observe(headerRef.current);
        if (aboutRef.current) observer.observe(aboutRef.current);
        if (technologiesRef.current) observer.observe(technologiesRef.current);
        if (projectsRef.current) observer.observe(projectsRef.current);
        if (contactRef.current) observer.observe(contactRef.current);

        return () => {
            if (headerRef.current) observer.unobserve(headerRef.current);
            if (aboutRef.current) observer.unobserve(aboutRef.current);
            if (technologiesRef.current) observer.unobserve(technologiesRef.current);
            if (projectsRef.current) observer.unobserve(projectsRef.current);
            if (contactRef.current) observer.unobserve(contactRef.current);
        }
    }, [handleObserver])

    return (
        <>
            <Head>
                <title>Serey Roth&apos; Portfolio</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className='w-screen min-h-screen flex flex-col items-center
            bg-gradient-to-b from-indigo-500/20'>
                <Navbar />
                <div className='fixed top-1/2 right-5 z-[5] -translate-y-1/2'>
                    <NavigationDots
                        currentSectionIndex={currentSection}
                        onClick={handleNavigationDotClick} />
                </div>
                <Header ref={headerRef}/>
                <About ref={aboutRef} abouts={abouts} />
                <Technologies ref={technologiesRef} technologies={technologies} />
                <Projects ref={projectsRef} projects={projects} />
                <Footer ref={contactRef} />
            </main>
        </>
    )
}

export async function getServerSideProps() {
    const projectQuery = `*[_type == 'project']{ 
        ...,
        "tools":tools[]->{name, icon} 
    }`;
    const toolQuery = `*[_type == "tool"]`;
    const aboutQuery = `*[_type == "about"]`;
    
    const projects = await client.fetch(projectQuery);
    const technologies = await client.fetch(toolQuery);
    const abouts = await client.fetch(aboutQuery);

    return {
        props: {
            projects,
            technologies,
            abouts,
        }
    }
}
